import JsonFile from '@expo/json-file';
type SessionData = {
    sessionSecret?: string;
    userId?: string;
    username?: string;
    currentConnection?: 'Username-Password-Authentication' | 'Browser-Flow-Authentication';
};
export type UserSettingsData = {
    auth?: SessionData | null;
    ignoreBundledBinaries?: string[];
    PATH?: string;
    /** Last development code signing ID used for `npx expo run:ios`. */
    developmentCodeSigningId?: string;
    /** Unique user ID which is generated anonymously and can be cleared locally. */
    uuid?: string;
};
export declare function getExpoHomeDirectory(): string;
/** Return the user cache directory. */
export declare function getSettingsDirectory(): string;
/** Return the file path of the settings file */
export declare function getSettingsFilePath(): string;
/** Get a new JsonFile instance pointed towards the settings file */
export declare function getSettings(): JsonFile<UserSettingsData>;
export declare function getAccessToken(): string | null;
export declare function getSession(): SessionData | null;
export declare function setSessionAsync(sessionData?: SessionData): Promise<void>;
/**
 * Check if there are credentials available, without fetching the user information.
 * This can be used as a faster check to see if users are authenticated.
 * Note, this isn't checking the validity of the credentials.
 */
export declare function hasCredentials(): boolean;
/**
 * Get an anonymous and randomly generated identifier.
 * This is used to group telemetry event by unknown actor,
 * and cannot be used to identify a single user.
 */
export declare function getAnonymousIdAsync(): Promise<string>;
/**
 * Get an anonymous and randomly generated identifier.
 * This is used to group telemetry event by unknown actor,
 * and cannot be used to identify a single user.
 */
export declare function getAnonymousId(): string;
export {};
