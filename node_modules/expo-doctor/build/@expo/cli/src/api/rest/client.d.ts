import type { JSONValue } from '@expo/json-file';
import type { FetchLike } from './client.types';
export declare class ApiV2Error extends Error {
    readonly name = "ApiV2Error";
    readonly code: string;
    readonly expoApiV2ErrorCode: string;
    readonly expoApiV2ErrorDetails?: JSONValue;
    readonly expoApiV2ErrorServerStack?: string;
    readonly expoApiV2ErrorMetadata?: object;
    readonly expoApiV2RequestId?: string;
    constructor(response: {
        message: string;
        code: string;
        stack?: string;
        details?: JSONValue;
        metadata?: object;
        requestId: string;
    });
    toString(): string;
}
/**
 * An Expo server error that didn't return the expected error JSON information.
 * The only 'expected' place for this is in testing, all other cases are bugs with the server.
 */
export declare class UnexpectedServerError extends Error {
    readonly name = "UnexpectedServerError";
}
/**
 * An error defining that the server didn't return the expected error JSON information.
 * The only 'expected' place for this is in testing, all other cases are bugs with the client.
 */
export declare class UnexpectedServerData extends Error {
    readonly name = "UnexpectedServerData";
}
/** Validate the response json contains `.data` property, or throw an unexpected server data error */
export declare function getResponseDataOrThrow<T = any>(json: unknown): T;
/**
 * @returns a `fetch` function that will inject user authentication information and handle errors from the Expo API.
 */
export declare function wrapFetchWithCredentials(fetchFunction: FetchLike): FetchLike;
/**
 * Create an instance of the fully qualified fetch command (auto authentication and api) but with caching in the '~/.expo' directory.
 * Caching is disabled automatically if the EXPO_NO_CACHE or EXPO_BETA environment variables are enabled.
 */
export declare function createCachedFetch({ fetch, cacheDirectory, ttl, skipCache, }: {
    fetch?: FetchLike;
    cacheDirectory: string;
    ttl?: number;
    skipCache?: boolean;
}): FetchLike;
/** Instance of fetch with automatic base URL pointing to the Expo API, user credential injection, and API error handling. Caching not included.  */
export declare const fetchAsync: FetchLike;
