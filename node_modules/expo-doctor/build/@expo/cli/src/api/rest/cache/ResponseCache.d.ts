import type { Response, RequestInfo, RequestInit } from 'undici';
export type ResponseCacheEntry = {
    body: import('stream/web').ReadableStream;
    info: ReturnType<typeof getResponseInfo>;
};
export interface ResponseCache {
    /** Load the response info from cache, if any */
    get(cacheKey: string): Promise<ResponseCacheEntry | undefined>;
    /** Store the response info to cache, and return the cached info */
    set(cacheKey: string, response: ResponseCacheEntry): Promise<ResponseCacheEntry | undefined>;
    /** Remove a response entry from the cache */
    remove(cacheKey: string): Promise<void>;
}
export declare function getResponseInfo(response: Response): {
    url: string;
    status: number;
    statusText: string;
    headers: {
        [k: string]: string;
    };
};
export declare function getRequestCacheKey(info: RequestInfo, init?: RequestInit): string;
/** @internal Exposed for testing */
export declare function getRequestInfoCacheData(info: RequestInfo): {
    url: string;
    credentials?: undefined;
    destination?: undefined;
    headers?: undefined;
    integrity?: undefined;
    method?: undefined;
    redirect?: undefined;
    referrer?: undefined;
    referrerPolicy?: undefined;
} | {
    credentials: string;
    destination: string;
    headers: {
        [k: string]: string;
    };
    integrity: string;
    method: string;
    redirect: import("undici-types").RequestRedirect;
    referrer: string;
    referrerPolicy: import("undici-types").ReferrerPolicy;
    url: string;
};
/** @internal Exposed for testing */
export declare function getRequestBodyCacheData(body: RequestInit['body']): string | Buffer<ArrayBufferLike> | null | undefined;
