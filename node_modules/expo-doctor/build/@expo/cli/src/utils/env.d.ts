declare class Env {
    /** Enable profiling metrics */
    get EXPO_PROFILE(): boolean;
    /** Enable debug logging */
    get EXPO_DEBUG(): boolean;
    /** Disable all network requests */
    get EXPO_OFFLINE(): boolean;
    /** Enable the beta version of Expo (TODO: Should this just be in the beta version of expo releases?) */
    get EXPO_BETA(): boolean;
    /** Enable staging API environment */
    get EXPO_STAGING(): boolean;
    /** Enable local API environment */
    get EXPO_LOCAL(): boolean;
    /** Is running in non-interactive CI mode */
    get CI(): boolean;
    /** Disable telemetry (analytics) */
    get EXPO_NO_TELEMETRY(): boolean;
    /** Disable detaching telemetry to separate process */
    get EXPO_NO_TELEMETRY_DETACH(): boolean;
    /** local directory to the universe repo for testing locally */
    get EXPO_UNIVERSE_DIR(): string;
    /** @deprecated Default Webpack host string */
    get WEB_HOST(): string;
    /** Skip warning users about a dirty git status */
    get EXPO_NO_GIT_STATUS(): boolean;
    /** Disable auto web setup */
    get EXPO_NO_WEB_SETUP(): boolean;
    /** Disable auto TypeScript setup */
    get EXPO_NO_TYPESCRIPT_SETUP(): boolean;
    /** Disable all API caches. Does not disable bundler caches. */
    get EXPO_NO_CACHE(): boolean;
    /** Disable the app select redirect page. */
    get EXPO_NO_REDIRECT_PAGE(): boolean;
    /** The React Metro port that's baked into react-native scripts and tools. */
    get RCT_METRO_PORT(): number;
    /** Skip validating the manifest during `export`. */
    get EXPO_SKIP_MANIFEST_VALIDATION_TOKEN(): boolean;
    /** Public folder path relative to the project root. Default to `public` */
    get EXPO_PUBLIC_FOLDER(): string;
    /** Higher priority `$EDIOTR` variable for indicating which editor to use when pressing `o` in the Terminal UI. */
    get EXPO_EDITOR(): string;
    /**
     * Overwrite the dev server URL, disregarding the `--port`, `--host`, `--tunnel`, `--lan`, `--localhost` arguments.
     * This is useful for browser editors that require custom proxy URLs.
     */
    get EXPO_PACKAGER_PROXY_URL(): string;
    /**
     * **Experimental** - Disable using `exp.direct` as the hostname for
     * `--tunnel` connections. This enables **https://** forwarding which
     * can be used to test universal links on iOS.
     *
     * This may cause issues with `expo-linking` and Expo Go.
     *
     * Select the exact subdomain by passing a string value that is not one of: `true`, `false`, `1`, `0`.
     */
    get EXPO_TUNNEL_SUBDOMAIN(): string | boolean;
    /**
     * Force Expo CLI to use the [`resolver.resolverMainFields`](https://facebook.github.io/metro/docs/configuration/#resolvermainfields) from the project `metro.config.js` for all platforms.
     *
     * By default, Expo CLI will use `['browser', 'module', 'main']` (default for Webpack) for web and the user-defined main fields for other platforms.
     */
    get EXPO_METRO_NO_MAIN_FIELD_OVERRIDE(): boolean;
    /**
     * HTTP/HTTPS proxy to connect to for network requests. Configures [https-proxy-agent](https://www.npmjs.com/package/https-proxy-agent).
     */
    get HTTP_PROXY(): string;
    /**
     * Use the network inspector by overriding the metro inspector proxy with a custom version.
     * @deprecated This has been replaced by `@react-native/dev-middleware` and is now unused.
     */
    get EXPO_NO_INSPECTOR_PROXY(): boolean;
    /** Disable lazy bundling in Metro bundler. */
    get EXPO_NO_METRO_LAZY(): boolean;
    /**
     * Enable the unstable inverse dependency stack trace for Metro bundling errors.
     * @deprecated This will be removed in the future.
     */
    get EXPO_METRO_UNSTABLE_ERRORS(): boolean;
    /** Enable the experimental sticky resolver for Metro (Uses Expo Autolinking results and applies them to Metro's resolution)
     * @deprecated Replaced by `exp.experiments.autolinkingModuleResolution`
     */
    get EXPO_USE_STICKY_RESOLVER(): boolean;
    /** Enable the unstable fast resolver for Metro. */
    get EXPO_USE_FAST_RESOLVER(): boolean;
    /** Disable Environment Variable injection in client bundles. */
    get EXPO_NO_CLIENT_ENV_VARS(): boolean;
    /** Set the default `user` that should be passed to `--user` with ADB commands. Used for installing APKs on Android devices with multiple profiles. Defaults to `0`. */
    get EXPO_ADB_USER(): string;
    /** Used internally to enable E2E utilities. This behavior is not stable to external users. */
    get __EXPO_E2E_TEST(): boolean;
    /** Unstable: Force single-bundle exports in production. */
    get EXPO_NO_BUNDLE_SPLITTING(): boolean;
    /**
     * Enable Atlas to gather bundle information during development or export.
     * Note, because this used to be an experimental feature, both `EXPO_ATLAS` and `EXPO_UNSTABLE_ATLAS` are supported.
     */
    get EXPO_ATLAS(): boolean;
    /** Unstable: Enable tree shaking for Metro. */
    get EXPO_UNSTABLE_TREE_SHAKING(): boolean;
    /** Unstable: Enable eager bundling where transformation runs uncached after the entire bundle has been created. This is required for production tree shaking and less optimized for development bundling. */
    get EXPO_UNSTABLE_METRO_OPTIMIZE_GRAPH(): boolean;
    /** Enable the use of Expo's custom metro require implementation. The custom require supports better debugging, tree shaking, and React Server Components. */
    get EXPO_USE_METRO_REQUIRE(): boolean;
    /** Internal key used to pass eager bundle data from the CLI to the native run scripts during `npx expo run` commands. */
    get __EXPO_EAGER_BUNDLE_OPTIONS(): string;
    /** Disable server deployment during production builds (during `expo export:embed`). This is useful for testing API routes and server components against a local server. */
    get EXPO_NO_DEPLOY(): boolean;
    /** Enable hydration during development when rendering Expo Web */
    get EXPO_WEB_DEV_HYDRATE(): boolean;
    /** Enable experimental React Server Functions support. */
    get EXPO_UNSTABLE_SERVER_FUNCTIONS(): boolean;
    /** Enable unstable/experimental mode where React Native Web isn't required to run Expo apps on web. */
    get EXPO_NO_REACT_NATIVE_WEB(): boolean;
    /** Enable unstable/experimental support for deploying the native server in `npx expo run` commands. */
    get EXPO_UNSTABLE_DEPLOY_SERVER(): boolean;
    /** Is running in EAS Build. This is set by EAS: https://docs.expo.dev/eas/environment-variables/ */
    get EAS_BUILD(): boolean;
    /** Disable the React Native Directory compatibility check for new architecture when installing packages */
    get EXPO_NO_NEW_ARCH_COMPAT_CHECK(): boolean;
    /** Disable the dependency validation when installing other dependencies and starting the project */
    get EXPO_NO_DEPENDENCY_VALIDATION(): boolean;
    /** Force Expo CLI to run in webcontainer mode, this has impact on which URL Expo is using by default */
    get EXPO_FORCE_WEBCONTAINER_ENV(): boolean;
    /** Disable by falsy value live binding in experimental import export support. Enabled by default. */
    get EXPO_UNSTABLE_LIVE_BINDINGS(): boolean;
    /**
     * Enable the experimental MCP integration or further specify the MCP server URL.
     */
    get EXPO_UNSTABLE_MCP_SERVER(): string;
}
export declare const env: Env;
export declare function envIsWebcontainer(): boolean;
export {};
